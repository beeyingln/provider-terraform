/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	encodingjson "encoding/json"
	"fmt"

	ipaddressv1alpha1 "github.com/crossplane-contrib/provider-jet-netbox/apis/ipaddress/v1alpha1"
	manufacturerv1alpha1 "github.com/crossplane-contrib/provider-jet-netbox/apis/manufacturer/v1alpha1"
	"github.com/pkg/errors"

	"github.com/crossplane/terrajet/pkg/resource"
	"github.com/crossplane/terrajet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this Resource
func (mg *Resource) GetTerraformResourceType() string {
	terraformResourceType := mg.ObjectMeta.Annotations["terraformResourceType"]
	return terraformResourceType/*"netbox_ip_platform"*/
}

// GetConnectionDetailsMapping for this Resource
func (tr *Resource) GetConnectionDetailsMapping() map[string]string {
	return nil
}

func ConvertToObservations(terraformResourceType string, data []byte) (interface{}, error) {
	var obj interface{}
	switch terraformResourceType {
	case "netbox_ip_address":
		obj = &ipaddressv1alpha1.AddressObservation{}
	case "netbox_manufacturer":
		obj = &manufacturerv1alpha1.ManufacturerObservation{}
	}

	err := encodingjson.Unmarshal(data, obj)
	if err != nil {
		return nil, err
	}

	return obj, nil
}

// GetObservation of this Resource
func (tr *Resource) GetObservation() (map[string]interface{}, error) {	
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}	
	fmt.Println("GetObservation-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")
	json.TFParser.Unmarshal(o, &base)
	fmt.Println(base)
	fmt.Println("GetObservation-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Resource
func (tr *Resource) SetObservation(obs map[string]interface{}) error {	
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	bylo := json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
	fmt.Println("SetObservation-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")
	fmt.Println(obs)
	fmt.Println(&tr.Status.AtProvider)
	fmt.Println("SetObservation-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")
	
	return bylo
}

func GetObservationId(terraformResourceType string, data []byte) (string, error) {
	switch terraformResourceType {
	case "netbox_ip_address":
		obj := &ipaddressv1alpha1.AddressObservation{}
		err := encodingjson.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
	case "netbox_manufacturer":
		obj := &manufacturerv1alpha1.ManufacturerObservation{}
		err := encodingjson.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
	}

	return "", nil
}

// GetID returns ID of underlying Terraform resource of this Resource
func (tr *Resource) GetID() string {
	id, _ := GetObservationId(tr.GetTerraformResourceType(), tr.Status.AtProvider.Raw)
	/*if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID*/
	return id
}

func ConvertToParameters(terraformResourceType string, data []byte) (interface{}, error) {
	var obj interface{}
	switch terraformResourceType {
	case "netbox_ip_address":
		obj = &ipaddressv1alpha1.AddressParameters{}
	case "netbox_manufacturer":
		obj = &manufacturerv1alpha1.ManufacturerParameters{}
	}

	err := encodingjson.Unmarshal(data, obj)
	if err != nil {
		return nil, err
	}

	return obj, nil
}

// GetParameters of this Resource
func (tr *Resource) GetParameters() (map[string]interface{}, error) {
	/*p, err := json.TFParser.Marshal(tr.Spec.ForProvider)*/
	obj, _ := ConvertToParameters(tr.GetTerraformResourceType(), tr.Spec.ForProvider.Raw)
	p, err := json.TFParser.Marshal(obj)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Resource
func (tr *Resource) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	/*return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)*/
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Resource using its observed tfState.
// returns True if there are any spec changes for the resource.
/*func (tr *Resource) LateInitialize(attrs []byte) (bool, error) {
	params := &ResourceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}*/
func (tr *Resource) LateInitialize(attrs []byte) (bool, error) {	
	var params interface{}
	switch tr.GetTerraformResourceType() {
	case "netbox_ip_address":
		params = &ipaddressv1alpha1.AddressParameters{}
		var ap ipaddressv1alpha1.AddressParameters
		encodingjson.Unmarshal(tr.Spec.ForProvider.Raw, &ap)
		
		if err := json.TFParser.Unmarshal(attrs, params); err != nil {
			return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
		}
		opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}
	
		li := resource.NewGenericLateInitializer(opts...)
		//return li.LateInitialize(&tr.Spec.ForProvider, params)	
		return li.LateInitialize(&ap, params)
		
	case "netbox_manufacturer":
		params = &manufacturerv1alpha1.ManufacturerParameters{}
		var mp manufacturerv1alpha1.ManufacturerParameters
		encodingjson.Unmarshal(tr.Spec.ForProvider.Raw, &mp)
		
		if err := json.TFParser.Unmarshal(attrs, params); err != nil {
			return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
		}
		opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}
	
		li := resource.NewGenericLateInitializer(opts...)
		//return li.LateInitialize(&tr.Spec.ForProvider, params)	
		return li.LateInitialize(&mp, params)
	}
	
	return true, nil
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Resource) GetTerraformSchemaVersion() int {
	return 0
}
